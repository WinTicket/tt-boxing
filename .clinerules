# プロジェクトの概要
このプロジェクトは、Pythonを用いた映像をソースとするストリーミング処理を目的としています。コードの可読性と保守性を重視し、チーム全体で一貫したスタイルを維持します。
プロジェクトはuvを使用してパッケージ管理を行います。

# 前提
以下ディレクトリが管理対象です。
- refactor/projects/punch_classification

# コーディング規約
- 変数名や関数名は、意味が明確でわかりやすいものとします。

# コードフォーマッター / リンター
- **ruff**を使用してコードの自動整形と静的解析を行います。
```
uv run ruff check --fix
```

# インポート順序
- **isort**を使用してインポート文の順序を整理します。標準ライブラリ、サードパーティライブラリ、ローカルモジュールの順に並べます。


# 型ヒント
- すべての関数とメソッドには型ヒントを付与し、可読性と保守性を高めます。

# ドキュメンテーション
- 関数やクラスには適切なdocstringを記述し、コードの理解を容易にします。

# テスト
- **pytest**を使用してユニットテストを作成し、コードの信頼性を確保します。
```
uv run pytest
```

# コミットメッセージ
- コミットメッセージは、変更内容が明確に伝わるように簡潔かつ具体的に記述します。

# ブランチ戦略
- `main`ブランチは常に安定した状態を保ちます。
- 新機能や修正は、トピックブランチを作成してから`main`ブランチへマージします。

# コードレビュー
- すべてのプルリクエストは、少なくとも1人のメンバーによるコードレビューを受ける必要があります。

# セキュリティ
- 機密情報や認証情報は、コード内に直接記述せず、環境変数や設定ファイルで管理します。

# 環境設定
- 仮想環境を使用して依存関係を管理します。
- 必要なパッケージは`requirements.txt`に記載します。

# ロギング
- **logging**モジュールを使用して、適切なログを出力します。

# エラーハンドリング
- 例外処理を適切に行い、予期しないエラーが発生しないようにします。

# パフォーマンス
- パフォーマンスに影響を与える可能性のあるコードは、事前にプロファイリングを行います。

# 継続的インテグレーション
- **GitHub Actions**などのCIツールを使用して、自動テストとデプロイを行います。

# ライセンス
- プロジェクトに適切なライセンスを設定し、著作権と使用許諾を明確にします。

# その他
- コード内にTODOやFIXMEを残す場合は、対応する課題をトラッキングし、後日修正します。
